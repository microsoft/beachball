import{_ as t,c as i,b as n,d as s,a as o,r as p,o as l}from"./app-BPu9V2sC.js";const d={};function c(u,e){const a=p("Mermaid");return l(),i("div",null,[e[0]||(e[0]=n("h1",{id:"bump-algorithm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bump-algorithm"},[n("span",null,"Bump algorithm")])],-1)),e[1]||(e[1]=n("p",null,"Bumping a single package is a simple task of just looking up a change file for its change type and using semver to bump the version according to what that change type is.",-1)),e[2]||(e[2]=n("p",null,"Things get a bit more complicated when we introduce the concepts of version groups and dependent package bumping. For the sake of describing this algorithm, we can take a look at the following graph:",-1)),s(a,{id:"mermaid-9",code:"eJxLL0osyFAIceFSUEgsKFDQ1bVTSMvP98lMAgpAGDCx0JLMnGIkZcn5uQX5eal5JSDFQPHi0iSIYUqlIJVKQCGwEWB9YB3FJZU5qTBj0ORSEkvgUql5KVwA25gu1w=="}),e[3]||(e[3]=o('<h3 id="dependent-version-bumping" tabindex="-1"><a class="header-anchor" href="#dependent-version-bumping"><span>Dependent version bumping</span></a></h3><p>In the above example, the <code>app</code> package is dependent on <code>fooLib</code>. Let&#39;s assume that the developer has created a <code>minor</code> change inside <code>fooLib</code>. By default, <code>beachball</code> will also bump <code>app</code> with a <code>patch</code> change type, like this:</p>',2)),s(a,{id:"mermaid-16",code:"eJxLL0osyFAIceFSUEgsKFDQ1VMoSCxJzlDQ07UDCfilVpREKwEZ6kqxQCVp+fk+mUkgVbmZeflFYFUQMYhCCBukFqi4uDQJYrpScmlRUWpeiRJQEGoNXB9QKDUvBVV5UmluQWoKXDXIaCQdIC5UFwAosjjC"}),e[4]||(e[4]=o(`<p>To modify what the dependent package bumped change type would be (e.g. making <code>app</code> also bump with <code>minor</code> in the above example), you have to modify the change file to specify this. Here&#39;s an example of a change file under <code>/changes</code>:</p><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">{</span>
<span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;comment&quot;: &quot;Upgrading fooLib&quot;,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line"> &quot;type&quot;: &quot;patch&quot;,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line"> &quot;packageName&quot;: &quot;fooLib&quot;,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line"> &quot;email&quot;: &quot;me@me.me&quot;,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line"> &quot;commit&quot;: &quot;b785112c03f063b71d936ff052470817019267d4&quot;,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line"> &quot;date&quot;: &quot;2019-06-20T22:54:59.172Z&quot;,</span>
<span class="line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &quot;dependentChangeType&quot;: &quot;minor&quot;</span>
<span class="line"></span></span>}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="grouped-bumping" tabindex="-1"><a class="header-anchor" href="#grouped-bumping"><span>Grouped bumping</span></a></h3><p>In the above example, <code>fooUtils</code>, <code>styleUtils</code>, <code>dateUtils</code> all belong to a <code>utils</code> group. Whenever one of those packages get bumped, the entire group would get bumped by the same change type. We can illustrate it like so:</p>`,4)),s(a,{id:"mermaid-27",code:"eJxLL0osyFAIceFSUCguTYLwlEpLMnOKlYBCCgpp+fmhIJ6Crq6dQnFJZU4qmIspl5JYApdKzUvhwjRQHdVEv9SKkmgYRz0WzQKwrBKCr64Ui6Eb1V6IDjgXogHqEoRL9RRyM/PyixT0gFqRzQI5F24ZqjJURwEVwu1AUYfiEC4AQeNxHw=="}),e[5]||(e[5]=n("blockquote",null,[n("p",null,"NOTE: the group get bumped together even if it is part of a dependent package bump. In other words, package bumps propagate their changes via dependent package bumps as well as group package bumps.")],-1))])}const m=t(d,[["render",c]]),g=JSON.parse('{"path":"/concepts/bump-algorithm.html","title":"Bump algorithm","lang":"en-US","frontmatter":{"tags":["bump"],"category":"doc"},"headers":[{"level":3,"title":"Dependent version bumping","slug":"dependent-version-bumping","link":"#dependent-version-bumping","children":[]},{"level":3,"title":"Grouped bumping","slug":"grouped-bumping","link":"#grouped-bumping","children":[]}],"git":{"updatedTime":1743521284000,"contributors":[{"name":"Ken Chau","username":"","email":"kchau@microsoft.com","commits":1}],"changelog":[{"hash":"d2d034400c19d12f94a58ce401b8e1abe83ca681","time":1743521284000,"email":"kchau@microsoft.com","author":"Ken Chau","message":"applying package updates"}]},"filePathRelative":"concepts/bump-algorithm.md"}');export{m as comp,g as data};
