import{_ as n,c as s,a,o as i}from"./app-Bwsni2wZ.js";const t={};function o(l,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="ci-integration" tabindex="-1"><a class="header-anchor" href="#ci-integration"><span>CI integration</span></a></h1><p>There are two parts to CI integration with <code>beachball</code>:</p><ol><li><a href="./change-files#validating-change-files">Add a PR build step</a> to call <code>beachball check</code> to validate that change files are included.</li><li>Add a release build step to call <code>beachball publish</code> to publish to npm and push back to git (this page).</li></ol><p>To automate the bumping of package versions based on change files, you&#39;ll need to configure your release workflow/pipeline so that <code>beachball publish</code> has write access to the git repo and npm registry. The exact steps will vary between CI systems, but general concepts as well as steps for some common setups are outlined below.</p><h2 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication"><span>Authentication</span></a></h2><p>Automated publishing from a GitHub repo to the public npm registry (<code>registry.npmjs.org</code>) typically uses personal access tokens for authentication. These tokens are stored as secrets in your CI system. You should ensure that these secrets are only available to release builds.</p><p>For Azure DevOps repos publishing to a private registry, there are other possible approaches (such as using a service account with credentials stored in a key vault) which are not currently covered by these docs.</p><h3 id="generating-tokens" tabindex="-1"><a class="header-anchor" href="#generating-tokens"><span>Generating tokens</span></a></h3><h4 id="npm-token" tabindex="-1"><a class="header-anchor" href="#npm-token"><span>npm token</span></a></h4><p>If publishing to the public npm registry (<code>registry.npmjs.org</code>), <a href="https://docs.npmjs.com/creating-and-viewing-access-tokens#creating-granular-access-tokens-on-the-website" target="_blank" rel="noopener noreferrer">create a granular access token</a> with write access to <strong>only</strong> the relevant package(s) and/or scope(s). Classic automation tokens are not recommended due to their overly broad permissions.</p><h4 id="github-token" tabindex="-1"><a class="header-anchor" href="#github-token"><span>GitHub token</span></a></h4><p>Since a repo&#39;s <code>main</code>/<code>master</code> branch should be protected, this creates some difficulties for pushing changes back during automated publishing.</p><p>The main way to allow <code>beachball</code> to push back to a repo with branch protections is by using a <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token" target="_blank" rel="noopener noreferrer"><strong>fine-grained</strong> personal access token</a> with write permissions for <strong>only</strong> the specific repo. (If the repo is in an org that doesn&#39;t allow persistent admin access, see <a href="https://github.com/microsoft/beachball/issues/1008" target="_blank" rel="noopener noreferrer">these instructions</a>.)</p><p>An alternative approach is creating a fine-grained PAT with a &quot;machine user&quot; account. Create a new account with an alternate email or <a href="https://en.wikipedia.org/wiki/Email_address#Subaddressing" target="_blank" rel="noopener noreferrer">subaddress</a> (<code>+</code> address), give it contributor permissions to only this repo, and add it under &quot;Restrict who can push to matching branches&quot; in the branch protection rule.</p><p>(Note that the <a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication" target="_blank" rel="noopener noreferrer">built-in <code>GITHUB_TOKEN</code></a> won&#39;t work for publishing because that actor can&#39;t be given permission to bypass policies.)</p><h3 id="storing-tokens" tabindex="-1"><a class="header-anchor" href="#storing-tokens"><span>Storing tokens</span></a></h3><h4 id="secrets-github-actions">GitHub Actions</h4><p>To restrict secret access to appropriate branches, use an <strong><a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment" target="_blank" rel="noopener noreferrer">environment</a></strong>. (The docs for environments focus on cloud deployments or resources, but environments can also be used only for secret storage.)</p><ol><li><a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#creating-an-environment" target="_blank" rel="noopener noreferrer">Create an environment</a>.</li><li>Restrict <a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-branches" target="_blank" rel="noopener noreferrer">deployment branches</a> to &quot;Selected branches&quot; and add a rule to allow only your release branch(es) (often <code>main</code>/<code>master</code>).</li><li><a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-an-environment" target="_blank" rel="noopener noreferrer">Add secrets</a> for the npm and GitHub tokens.</li><li>To <a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#using-an-environment" target="_blank" rel="noopener noreferrer">use the environment</a>, add a key <code>environment: your-env-name</code> in your release workflow job. (Full example below.)</li></ol><h4 id="secrets-azure-pipelines">Azure Pipelines</h4><p>There are a couple of options here:</p><ul><li>Use <a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&amp;tabs=yaml%2Cbatch#secret-variables" target="_blank" rel="noopener noreferrer">secret variables in your release pipeline</a>.</li><li>Use <a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&amp;tabs=classic" target="_blank" rel="noopener noreferrer">secrets in a variable group</a>, which can optionally be linked to a key vault. Ensure that this variable group is only accessible to your release pipeline.</li></ul><h2 id="setting-options-for-publishing" tabindex="-1"><a class="header-anchor" href="#setting-options-for-publishing"><span>Setting options for publishing</span></a></h2><p>If you&#39;re passing any custom options besides the npm token to <code>beachball publish</code>, it&#39;s recommended to set them in either the <code>beachball</code> config (if they don&#39;t interfere with other commands), or a <code>package.json</code> script (if specific to <code>publish</code>).</p><p>For example, the following script could be used for publishing public scoped packages:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;beachball publish --access public&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;re publishing to a private feed, <code>registry</code> should be set in the overall <code>beachball</code> config, since it&#39;s also used by the <code>sync</code> command. For example, if your beachball config is in the root <code>package.json</code> (or it works the same in a config file):</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;beachball&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;registry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://pkgs.dev.azure.com/some-org/_packaging/some-feed/npm/registry/&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="publishing" tabindex="-1"><a class="header-anchor" href="#publishing"><span>Publishing</span></a></h2><p>The exact publishing setup will vary depending on your CI setup, but the overall steps are as follows:</p><ol><li>Ensure the git user name and email are set, or git will reject the commit. Somewhere in your pipeline:<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> config user.name <span class="token string">&quot;someone&quot;</span></span>
<span class="line"><span class="token function">git</span> config user.email <span class="token string">&quot;someone@example.com&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Set up git authentication. This could use tokens (covered below), SSH keys, or some other non-interactive method.</li><li>Set up npm authentication. This could use tokens passed on the command line (covered below), tokens set in <code>.npmrc</code>, or some other method.</li><li>Run <code>beachball publish</code>!</li></ol><h3 id="github-repo-github-actions" tabindex="-1"><a class="header-anchor" href="#github-repo-github-actions"><span>GitHub repo + GitHub Actions</span></a></h3><p>Here&#39;s a sample setup for publishing from a GitHub repo using GitHub actions. The environment, secret, and script names can be modified as you prefer.</p><p>This sample assumes the following:</p><ul><li>An environment called <code>release</code> (set up <a href="#storing-tokens">as described above</a>) with the following secrets: <ul><li><code>REPO_PAT</code>: A GitHub fine-grained personal access token with write access (<a href="#github-token">as described above</a>)</li><li><code>NPM_TOKEN</code>: An npm token with write access to the package(s) and/or scope(s), such as a <a href="#npm-token">fine-grained token for public npm</a></li></ul></li><li>A repo root <code>package.json</code> script <code>release</code> which runs <code>beachball publish</code></li><li>The build is running on a Linux/Mac agent. (This could be easily adapted to a Windows agent with different syntax in the commands.)</li></ul><p>Note that in GitHub Actions, it&#39;s easiest to set up authentication if you set <code>persist-credentials: false</code> when checking out code.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># Example trigger configurations (choose one or more, or another setup)</span></span>
<span class="line"><span class="token comment"># on:</span></span>
<span class="line"><span class="token comment">#   # Release on push to main</span></span>
<span class="line"><span class="token comment">#   push:</span></span>
<span class="line"><span class="token comment">#     branches: [main]</span></span>
<span class="line"><span class="token comment">#   # Release daily (see https://crontab-generator.org/ for help with schedules)</span></span>
<span class="line"><span class="token comment">#   schedule:</span></span>
<span class="line"><span class="token comment">#     - cron: &#39;0 8 * * *&#39;</span></span>
<span class="line"><span class="token comment">#   # Release on manual trigger (can be used alone or with other options)</span></span>
<span class="line"><span class="token comment">#   workflow_dispatch:</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">environment</span><span class="token punctuation">:</span> release</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Variable syntax below assumes Linux/Mac but could be easily adapted to Windows</span></span>
<span class="line"><span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Check out code</span>
<span class="line">    <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line">    <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># Prevent the action from storing credentials in a way that&#39;s hard to override</span></span>
<span class="line">      <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># ... Other steps to prepare for publishing (install, build, test, etc) ...</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Set the name, email, and URL with PAT</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set git credentials</span>
<span class="line">    <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">      git config user.name &quot;someone&quot;</span>
<span class="line">      git config user.email &quot;someone@example.com&quot;</span>
<span class="line">      git remote set-url origin &quot;https://$REPO_PAT@github.com/your-org/your-repo&quot;</span></span>
<span class="line">    <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">REPO_PAT</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REPO_PAT <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Pass the token on the command line for publishing</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish</span>
<span class="line">    <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run release <span class="token punctuation">-</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>token &quot;$NPM_TOKEN&quot;</span>
<span class="line">    <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">NPM_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.NPM_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="github-repo-azure-pipelines" tabindex="-1"><a class="header-anchor" href="#github-repo-azure-pipelines"><span>GitHub repo + Azure Pipelines</span></a></h3><p>Here&#39;s a sample setup for publishing from a GitHub repo using Azure Pipelines. The environment, secret, and script names can be modified as you prefer.</p><p>This sample assumes the following:</p><ul><li>A variable group called <code>Beachball secrets</code> (set up <a href="#secrets-azure-pipelines">as described above</a>) with the following secrets: <ul><li><code>REPO_PAT</code>: A GitHub fine-grained personal access token with write access (<a href="#github-token">as described above</a>)</li><li><code>NPM_TOKEN</code>: An npm token with write access to the package(s) and/or scope(s), such as a <a href="#npm-token">fine-grained token for public npm</a></li></ul></li><li>A repo root <code>package.json</code> script <code>release</code> which runs <code>beachball publish</code></li><li>The build is running on a Linux/Mac agent. (This could be easily adapted to a Windows agent with different syntax in the commands.)</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># Example trigger configurations (choose one or more, or another setup)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># # Release on push to main</span></span>
<span class="line"><span class="token comment"># trigger: [main]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># # Release on a schedule</span></span>
<span class="line"><span class="token comment"># # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?tabs=yaml&amp;view=azure-devops#supported-cron-syntax</span></span>
<span class="line"><span class="token comment"># schedules:</span></span>
<span class="line"><span class="token comment">#   - cron: &#39;0 8 * * *&#39;</span></span>
<span class="line"><span class="token comment">#     branches:</span></span>
<span class="line"><span class="token comment">#       include: [main]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># This group should only be accessible to the release pipeline</span></span>
<span class="line"><span class="token key atrule">variables</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> Beachball secrets</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Variable syntax below assumes Linux/Mac but could be easily adapted to Windows</span></span>
<span class="line"><span class="token key atrule">pool</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">vmImage</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token comment"># ... Other steps to set up repo and prepare for publishing (install, build, test, etc) ...</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Set the name, email, and URL with PAT</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">      git config user.name &quot;someone&quot;</span>
<span class="line">      git config user.email &quot;someone@example.com&quot;</span>
<span class="line">      git remote set-url origin &quot;https://$(REPO_PAT)@github.com/your-org/your-repo&quot;</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Set git credentials</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Pass the token on the command line for publishing</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> npm run release <span class="token punctuation">-</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>token &quot;$(NPM_TOKEN)&quot;</span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="azure-repos-azure-pipelines" tabindex="-1"><a class="header-anchor" href="#azure-repos-azure-pipelines"><span>Azure Repos + Azure Pipelines</span></a></h3><p>This should be very similar to the GitHub version, aside from possibly the authentication method. You could potentially use personal access tokens for git and npm feed authentication (similar to above), or other methods are available which aren&#39;t currently covered here.</p><p>If you&#39;re publishing to a private Azure Artifacts npm feed, be sure to set <code>registry</code> in the <code>beachball</code> config <a href="#setting-options-for-publishing">as described above</a>.</p>`,45)]))}const p=n(t,[["render",o]]),r=JSON.parse('{"path":"/concepts/ci-integration.html","title":"CI integration","lang":"en-US","frontmatter":{"tags":["overview"],"category":"doc"},"git":{"updatedTime":1755658951000,"contributors":[{"name":"Elizabeth Craig","username":"","email":"elcraig@microsoft.com","commits":1}],"changelog":[{"hash":"409e3ca16bcf382835b13f196276ff5f1cf00c86","time":1755658951000,"email":"elcraig@microsoft.com","author":"Elizabeth Craig","message":"Update docs dependencies (#1073)"}]},"filePathRelative":"concepts/ci-integration.md"}');export{p as comp,r as data};
