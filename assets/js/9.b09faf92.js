(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{287:function(e,a,t){"use strict";t.r(a);var s=t(10),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"change"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#change"}},[e._v("#")]),e._v(" "),a("code",[e._v("change")])]),e._v(" "),a("p",[e._v("This command walks you through a couple of questions and will generate the appropriate "),a("a",{attrs:{href:"../concepts/change-files"}},[e._v("change file")]),e._v(" in the "),a("code",[e._v("/change")]),e._v(" directory. The generated file will be committed automatically.")]),e._v(" "),a("p",[e._v("One of the niceties of using this utility to generate change files is that it will "),a("a",{attrs:{href:"./check"}},[e._v("check")]),e._v(" whether or not you even need a change file. Also, it will load recent commit messages to ease change file generation.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ beachball change\n")])])]),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),a("p",[e._v("See the "),a("a",{attrs:{href:"./options"}},[e._v("options page")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"walkthrough"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#walkthrough"}},[e._v("#")]),e._v(" Walkthrough")]),e._v(" "),a("p",[e._v("If you have changes that are not committed yet (i.e. "),a("code",[e._v("git status")]),e._v(" reports changes), then "),a("code",[e._v("beachball change")]),e._v(" will warn you about these:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ beachball change\nDefaults to "origin/master"\nThere are uncommitted changes in your repository. Please commit these files first:\n- a-new-file\n')])])]),a("p",[e._v("Make sure to commit "),a("em",[e._v("all")]),e._v(" changes before proceeding with the "),a("code",[e._v("change")]),e._v(" command.")]),e._v(" "),a("p",[e._v("Now we'll commit the changes we made and run "),a("code",[e._v("beachball change")]),e._v(" again:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ beachball change\nDefaults to "origin/master"\nChecking for changes against "origin/master"\n\nPlease describe the changes for: single\n? Describe changes (type or choose one) ›\nadding a new file\n')])])]),a("p",[e._v("First, it will ask for a "),a("strong",[e._v("description")]),e._v(" of the change. You can enter any text, but "),a("code",[e._v("beachball")]),e._v(" will also provide a list of recent commit messages to choose from.")]),e._v(" "),a("blockquote",[a("p",[e._v("Tip: These descriptions will be collated into a changelog when the change is published by "),a("code",[e._v("beachball publish")]),e._v(", so think about how to describe your change in a way that's helpful and relevant for consumers of the package.")])]),e._v(" "),a("p",[e._v("Next, the form will ask for a change "),a("strong",[e._v("type")]),e._v(". This should be chosen based on "),a("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning rules"),a("OutboundLink")],1),e._v(" because it determines how to update the package version. If the change doesn't affect the published package at all (e.g. you just updated some comments), choose "),a("code",[e._v("none")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("? Change "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("type")]),e._v(" › - Use arrow-keys. Return to submit.\n❯  Patch - bug fixes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" no backwards incompatible changes.\n   Minor - small feature"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" backwards compatible changes.\n   None - this change does not affect the published package "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" any way.\n   Major - major feature"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" breaking changes.\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);