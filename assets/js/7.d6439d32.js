(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{360:function(e,a,t){"use strict";t.r(a);var s=t(25),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"change"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#change"}},[e._v("#")]),e._v(" "),t("code",[e._v("change")])]),e._v(" "),t("p",[e._v("This command walks you through a couple of questions and will generate the appropriate "),t("a",{attrs:{href:"../concepts/change-files"}},[e._v("change file")]),e._v(" in the "),t("code",[e._v("/change")]),e._v(" directory. The generated file will be checked into the repo automatically for you. One of the niceties of using this utility to generate change files is that it will "),t("a",{attrs:{href:"./check"}},[e._v("check")]),e._v(" whether or not you even need a change file or not. Also, it will try to pull in recent commit messages to speed up change file generation.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ beachball change\n")])])]),t("h3",{attrs:{id:"uncommitted-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uncommitted-files"}},[e._v("#")]),e._v(" Uncommitted Files")]),e._v(" "),t("p",[e._v("When you have changes that are not committed yet (i.e. "),t("code",[e._v("git status")]),e._v(" reports changes), then "),t("code",[e._v("beachball change")]),e._v(" will warn you about these:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ beachball change\nDefaults to "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"origin/master"')]),e._v("\nThere are uncommitted changes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" your repository. Please commit these files first:\n- a-new-file\n")])])]),t("p",[e._v("Make sure to commit "),t("em",[e._v("all")]),e._v(" changes before proceeding with the "),t("code",[e._v("change")]),e._v(" command")]),e._v(" "),t("h3",{attrs:{id:"walking-through-the-form"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#walking-through-the-form"}},[e._v("#")]),e._v(" Walking Through the Form")]),e._v(" "),t("p",[e._v("Let's move on. We will commit the changes we made and re-run "),t("code",[e._v("beachball change")]),e._v(" again:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ beachball change\nDefaults to "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"origin/master"')]),e._v("\nChecking "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" changes against "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"origin/master"')]),e._v("\n\nPlease describe the changes for: single\n? Describe changes "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("type or choose one"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" ›\nadding a new "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v("\n")])])]),t("p",[e._v("It'll ask for a description of the change. This can be any text, but it is also very convenient that "),t("code",[e._v("beachball")]),e._v(" will look for recent commit messages for you to choose as the description. These descriptions will be collated into a changelog when the change is published by "),t("code",[e._v("beachball publish")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("? Change "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("type")]),e._v(" › - Use arrow-keys. Return to submit.\n❯  Patch - bug fixes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" no backwards incompatible changes.\n   Minor - small feature"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" backwards compatible changes.\n   None - this change does not affect the published package "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" any way.\n   Major - major feature"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" breaking changes.\n")])])]),t("p",[e._v('The form will ask you about a change type. This is the answer that will ultimately determine whether to update the version of the package by major, minor or patch. You can even pick "none" if you don\'t intend for this change to affect the version of the package (e.g. fixing a README.md typo).')])])}),[],!1,null,null,null);a.default=n.exports}}]);