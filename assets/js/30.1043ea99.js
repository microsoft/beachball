(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{313:function(e,a,t){"use strict";t.r(a);var s=t(10),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"change-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#change-files"}},[e._v("#")]),e._v(" Change Files")]),e._v(" "),a("p",[e._v("There are "),a("a",{attrs:{href:"https://semantic-release.gitbook.io/semantic-release/",target:"_blank"}},[e._v("very popular")]),e._v(" and excellent packages available which manage package versioning based on commit messages. "),a("code",[e._v("beachball")]),e._v(" works differently, using something called a "),a("strong",[e._v("change file")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"what-is-a-change-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-change-file"}},[e._v("#")]),e._v(" What is a change file?")]),e._v(" "),a("p",[e._v("Change files are generated by the "),a("code",[e._v("beachball change")]),e._v(" command and live under the "),a("code",[e._v("/change")]),e._v(" folder. They look something like this:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"comment"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Upgrading React to 16.8.x to use hooks"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"minor"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"packageName"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"my-amazing-app"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"email"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"me@me.me"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[a("code",[e._v("beachball")]),e._v(" then uses the change files during publishing to determine how to bump package versions, and what content should be in the changelog.")]),e._v(" "),a("p",[e._v("The advantage of using "),a("code",[e._v(".json")]),e._v(" files rather than commit messages is that it's very easy to see visual diffs of these files in a PR, so reviewers can verify that the change type and message are correct.")]),e._v(" "),a("p",[e._v("For example, a reviewer might remind the author that a certain new API has been introduced and that the change ought to be a minor. The author can then modify the change file without having to amend history of a commit!")]),e._v(" "),a("h2",{attrs:{id:"generating-a-change-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-change-file"}},[e._v("#")]),e._v(" Generating a change file")]),e._v(" "),a("p",[e._v("After making some commits, it's time to create a change file. Change files are generated with the "),a("code",[e._v("beachball change")]),e._v(" command. (In a monorepo, this should only be run at the repo root.)")]),e._v(" "),a("p",[e._v("Assuming you've defined the "),a("code",[e._v("change")]),e._v(" wrapper script suggested on the "),a("a",{attrs:{href:"../overview/installation"}},[e._v("installation page")]),e._v(", run one of the following commands:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for npm")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run change\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for yarn")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" change\n")])])]),a("p",[e._v("If you don't already have a change file for this branch and package, it will ask you to enter a description and a change type (in a monorepo, it will ask for each changed package).")]),e._v(" "),a("ul",[a("li",[e._v("For the "),a("strong",[e._v("description")]),e._v(", "),a("code",[e._v("beachball")]),e._v(" will provide a list of recent commit messages to choose from, or you can type a custom message.")]),e._v(" "),a("li",[e._v("Choose the correct "),a("strong",[e._v("type")]),e._v(" using "),a("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning rules"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("p",[e._v("After you've answered those questions, a change file similar to the example above is created and committed in your branch under "),a("code",[e._v("/change")]),e._v(".")]),e._v(" "),a("p",[e._v("If you prefer, you can specify the change type and message on the command line. (In a monorepo, the specified type and message will be used for all changed packages.)")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for npm")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run change -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--type")]),e._v(" minor "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--message")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Upgrading React to 16.8.x to use hooks"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for yarn")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" change "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--type")]),e._v(" minor "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--message")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Upgrading React to 16.8.x to use hooks"')]),e._v("\n")])])]),a("h2",{attrs:{id:"validating-change-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validating-change-files"}},[e._v("#")]),e._v(" Validating change files")]),e._v(" "),a("p",[e._v("Your PR build should include a step that calls "),a("code",[e._v("beachball check")]),e._v(" to validate that change files are included.")]),e._v(" "),a("p",[e._v("Assuming you've defined the "),a("code",[e._v("checkchange")]),e._v(" wrapper script suggested on the "),a("a",{attrs:{href:"../overview/installation"}},[e._v("installation page")]),e._v(", add a step to your PR build as follows.")]),e._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For GitHub Actions:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### With npm:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" npm run checkchange\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### With yarn:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" yarn checkchange\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For Azure Pipelines:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### With npm:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" npm run checkchange\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### With yarn:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" yarn checkchange\n")])])]),a("p",[e._v("An alternative if desired is to define a separate required workflow/pipeline which skips the main install step and only runs "),a("code",[e._v("npx beachball check")]),e._v(". This has the advantage of providing faster validation and not blocking the main PR build (and hiding any later build/test/lint errors) simply for missing change files.")]),e._v(" "),a("p",[e._v("To prevent change files from being required for changes that will never affect the published package (such as tests, snapshots, or certain config files), use the "),a("a",{attrs:{href:"../overview/configuration#options"}},[a("code",[e._v("ignorePatterns")]),e._v(" option")]),e._v(".")]),e._v(" "),a("blockquote",[a("p",[e._v("Note: In the past, it was necessary to check out the repo's whole history for "),a("code",[e._v("beachball check")]),e._v(" to work properly (such as setting "),a("code",[e._v("fetch-depth: 0")]),e._v(" in "),a("code",[e._v("actions/checkout")]),e._v(" for GitHub workflows). This should no longer be needed because if "),a("code",[e._v("beachball")]),e._v(" detects a shallow clone, it will automatically fetch more history, and exit with an error if the current branch and target branch don't appear to share history.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);