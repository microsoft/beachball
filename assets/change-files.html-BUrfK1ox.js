import{_ as a,c as n,a as s,o as t}from"./app-OqSENS9Z.js";const i={};function o(l,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="change-files" tabindex="-1"><a class="header-anchor" href="#change-files"><span>Change files</span></a></h1><p>There are <a href="https://semantic-release.gitbook.io/semantic-release/" target="_blank">very popular</a> and excellent packages available which manage package versioning based on commit messages. <code>beachball</code> works differently, using something called a <strong>change file</strong>.</p><h2 id="what-is-a-change-file" tabindex="-1"><a class="header-anchor" href="#what-is-a-change-file"><span>What is a change file?</span></a></h2><p>Change files are generated by the <code>beachball change</code> command and live under the <code>/change</code> folder. They look something like this:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Upgrading React to 16.8.x to use hooks&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minor&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;packageName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-amazing-app&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;me@me.me&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>beachball</code> then uses the change files during publishing to determine how to bump package versions, and what content should be in the changelog.</p><p>The advantage of using <code>.json</code> files rather than commit messages is that it&#39;s very easy to see visual diffs of these files in a PR, so reviewers can verify that the change type and message are correct.</p><p>For example, a reviewer might remind the author that a certain new API has been introduced and that the change ought to be a minor. The author can then modify the change file without having to amend history of a commit!</p><h3 id="grouped-change-files" tabindex="-1"><a class="header-anchor" href="#grouped-change-files"><span>Grouped change files</span></a></h3><p>In a monorepo, it&#39;s usually recommended to set <code>groupChanges: true</code> in your <code>beachball</code> config file. This stores the change info for all of a branch&#39;s changed packages in a single change file, rather than creating many individual change files.</p><blockquote><p>Note: <code>groupChanges</code> won&#39;t work in the rare case that your repo has multiple sets of packages which are published separately using different <code>scope</code> options.</p></blockquote><h2 id="generating-a-change-file" tabindex="-1"><a class="header-anchor" href="#generating-a-change-file"><span>Generating a change file</span></a></h2><p>After making some commits, it&#39;s time to create a change file. Change files are generated with the <code>beachball change</code> command. (In a monorepo, this should only be run at the repo root.)</p><p>Assuming you&#39;ve defined the <code>change</code> wrapper script suggested on the <a href="../overview/installation">installation page</a>, run one of the following commands:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># for npm</span></span>
<span class="line">$ <span class="token function">npm</span> run change</span>
<span class="line"><span class="token comment"># for yarn</span></span>
<span class="line">$ <span class="token function">yarn</span> change</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t already have a change file for this branch and package, it will ask you to enter a description and a change type (in a monorepo, it will ask for each changed package).</p><ul><li>For the <strong>description</strong>, <code>beachball</code> will provide a list of recent commit messages to choose from, or you can type a custom message.</li><li>Choose the correct <strong>type</strong> using <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">semantic versioning rules</a>.</li></ul><p>After you&#39;ve answered those questions, a change file similar to the example above is created and committed in your branch under <code>/change</code>.</p><p>If you prefer, you can specify the change type and message on the command line. (In a monorepo, the specified type and message will be used for all changed packages.)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># for npm</span></span>
<span class="line">$ <span class="token function">npm</span> run change -- <span class="token parameter variable">--type</span> minor <span class="token parameter variable">--message</span> <span class="token string">&quot;Upgrading React to 16.8.x to use hooks&quot;</span></span>
<span class="line"><span class="token comment"># for yarn</span></span>
<span class="line">$ <span class="token function">yarn</span> change <span class="token parameter variable">--type</span> minor <span class="token parameter variable">--message</span> <span class="token string">&quot;Upgrading React to 16.8.x to use hooks&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validating-change-files" tabindex="-1"><a class="header-anchor" href="#validating-change-files"><span>Validating change files</span></a></h2><p>Your PR build should include a step that calls <code>beachball check</code> to validate that change files are included.</p><p>Assuming you&#39;ve defined the <code>checkchange</code> wrapper script suggested on the <a href="../overview/installation">installation page</a>, add a step to your PR build as follows.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token comment"># For GitHub Actions:</span></span>
<span class="line"><span class="token comment">### With npm:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run checkchange</span>
<span class="line"><span class="token comment">### With yarn:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn checkchange</span>
<span class="line"></span>
<span class="line"><span class="token comment"># For Azure Pipelines:</span></span>
<span class="line"><span class="token comment">### With npm:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> npm run checkchange</span>
<span class="line"><span class="token comment">### With yarn:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">script</span><span class="token punctuation">:</span> yarn checkchange</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An alternative if desired is to define a separate required workflow/pipeline which skips the main install step and only runs <code>npx beachball check</code>. This has the advantage of providing faster validation and not blocking the main PR build (and hiding any later build/test/lint errors) simply for missing change files.</p><p>To prevent change files from being required for changes that will never affect the published package (such as tests, snapshots, or certain config files), use the <a href="../overview/configuration#options"><code>ignorePatterns</code> option</a>.</p><blockquote><p>Note: In the past, it was necessary to check out the repo&#39;s whole history for <code>beachball check</code> to work properly (such as setting <code>fetch-depth: 0</code> in <code>actions/checkout</code> for GitHub workflows). This should no longer be needed because if <code>beachball</code> detects a shallow clone, it will automatically fetch more history, and exit with an error if the current branch and target branch don&#39;t appear to share history.</p></blockquote>`,27)]))}const r=a(i,[["render",o]]),p=JSON.parse('{"path":"/concepts/change-files.html","title":"Change files","lang":"en-US","frontmatter":{"tags":["overview"],"category":"doc"},"headers":[{"level":2,"title":"What is a change file?","slug":"what-is-a-change-file","link":"#what-is-a-change-file","children":[{"level":3,"title":"Grouped change files","slug":"grouped-change-files","link":"#grouped-change-files","children":[]}]},{"level":2,"title":"Generating a change file","slug":"generating-a-change-file","link":"#generating-a-change-file","children":[]},{"level":2,"title":"Validating change files","slug":"validating-change-files","link":"#validating-change-files","children":[]}],"git":{"updatedTime":1742854172000,"contributors":[{"name":"renovate[bot]","username":"renovate[bot]","email":"29139614+renovate[bot]@users.noreply.github.com","commits":2,"url":"https://github.com/renovate[bot]"},{"name":"Elizabeth Craig","username":"","email":"elcraig@microsoft.com","commits":1}],"changelog":[{"hash":"211c42435468d34b03c9c2da7740cb21e00f30dd","time":1742854172000,"email":"29139614+renovate[bot]@users.noreply.github.com","author":"renovate[bot]","message":"(docs) Update Yarn to v4.7.0 (#1030)","coAuthors":[{"name":"renovate[bot]","email":"29139614+renovate[bot]@users.noreply.github.com"},{"name":"Elizabeth Craig","email":"elcraig@microsoft.com"}]}]},"filePathRelative":"concepts/change-files.md"}');export{r as comp,p as data};
